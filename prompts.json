{
  "_comment": "All Claude prompts used by Vibe Hub. Edit these to customize how Claude assists with your projects. Use {PROJECT_NAME}, {PROJECT_PATH}, and {FEEDBACK_ITEMS} as placeholders that will be replaced automatically.",
  "feedbackRefinement": "I need help refining raw feedback for {PROJECT_NAME}.\n\n**Read the raw feedback** - Please read the feedback file at:\n{PROJECT_PATH}/.vibe/feedback.json\n\nThis file contains raw feedback items that need to be refined into actionable issues.\n\n**Utility Scripts Available**: You have access to helper scripts in `.vibe/scripts/` to reduce token usage:\n- `python .vibe/scripts/get-raw-feedback.py` - Get only pending feedback (excludes archived)\n- `python .vibe/scripts/get-project-summary.py` - Get quick stats without reading full files\n\n**Your Task - Refine Feedback:**\n\nFor each pending feedback item:\n\n1. **Ask Clarifying Questions (Only if Genuinely Unclear)**: Only ask questions when something is truly ambiguous or unclear. Make reasonable assumptions about implementation details rather than asking for confirmation on every decision. Questions should focus on fundamental ambiguities, not implementation specifics. If you can make a reasonable judgment, proceed with refinement - the user will provide corrections if needed.\n\n2. **Critique and Suggest Alternatives (Brief)**: Provide a brief critique (one paragraph max) if there are significant concerns about the approach. Prefer action over extensive analysis - it's better to refine autonomously and get user feedback on the result than to ask for input on every decision.\n\n3. **Break Into Subtasks**: Break the feedback into:\n   - Clear, actionable subtasks (numbered list)\n   - Each subtask should be specific and testable\n   - Order subtasks by logical implementation sequence\n\n4. **Estimate Complexity**: Assign a complexity rating (1-5) for the entire issue:\n   - 1 (Trivial): Very simple, quick fixes (< 1 hour)\n   - 2 (Simple): Straightforward changes with clear solution (1-3 hours)\n   - 3 (Moderate): Standard feature work requiring some thought (4-8 hours)\n   - 4 (Complex): Challenging work with multiple components (1-2 days)\n   - 5 (Very Complex): Major features or extensive refactoring (3+ days)\n\n5. **Create Refined Issues**: For each feedback item, create refined issue(s) with:\n   - Title: Short summary (5-10 words)\n   - Description: Detailed explanation of what needs to be done and why\n   - Subtasks: Numbered list of specific tasks\n   - Complexity: Your complexity rating from step 4 (1-5)\n   - Priority: Keep the same priority as the original feedback\n\n6. **Update Data Files**:\n   - Add refined issues to {PROJECT_PATH}/.vibe/issues.json\n   - Move the raw feedback from feedback.json to feedback-archive.json\n   - Link them: set refinedIntoIssueIds on archived feedback, set originalFeedbackId on issues\n\n**CRITICAL - Issue JSON Schema**:\nWhen writing to issues.json, you MUST include ALL required fields in this EXACT format:\n\n```json\n{\n  \"issues\": [\n    {\n      \"id\": \"issue-001\",\n      \"originalFeedbackId\": \"uuid-of-original-feedback-or-null\",\n      \"title\": \"Short summary (5-10 words)\",\n      \"description\": \"Detailed explanation of what needs to be done and why\",\n      \"subtasks\": [\n        \"First specific task\",\n        \"Second specific task\",\n        \"Third specific task\"\n      ],\n      \"complexity\": 3,\n      \"priority\": 2,\n      \"status\": \"pending\",\n      \"createdAt\": \"2025-01-27T10:30:00.000Z\",\n      \"completedAt\": null\n    }\n  ]\n}\n```\n\n**Required fields** (missing any of these will break the app):\n- id: string (e.g., \"issue-001\", \"issue-002\")\n- originalFeedbackId: string or null\n- title: string\n- description: string\n- subtasks: array of strings\n- complexity: number 1-5 (REQUIRED - 1=Trivial, 2=Simple, 3=Moderate, 4=Complex, 5=Very Complex)\n- priority: number 1-5\n- status: string (\"pending\" or \"completed\")\n- createdAt: ISO 8601 timestamp string\n- completedAt: ISO 8601 timestamp string or null\n\n**Important**: Focus on refinement quality, not implementation. Implementation will happen in a separate workflow after all feedback is refined.",
  "issueFix": "I need help implementing refined issues for {PROJECT_NAME}.\n\n**Read the issues** - Please read the issues file at:\n{PROJECT_PATH}/.vibe/issues.json\n\nThese are refined, actionable issues ready for implementation. Each issue has already been analyzed, broken into subtasks, and estimated.\n\n**Important**: Some issues may have status \"needs-rework\" with a \"bugReport\" field. These are issues that were previously implemented but had bugs found during testing. Pay special attention to the bug report context when fixing these issues.\n\n**Utility Scripts Available**: You have access to helper scripts in `.vibe/scripts/` to reduce token usage:\n- `python .vibe/scripts/get-pending-issues.py` - Get only pending issues (excludes completed from archive, includes needs-rework)\n- `python .vibe/scripts/get-project-summary.py` - Get quick stats without reading full files\n- `python .vibe/scripts/analyze-file-lengths.py` - Check for files over 500 lines needing refactoring\n\n**Your Task - Implement Issues:**\n\n1. **Create an Implementation Plan**: Review all issues and create a structured plan that:\n   - Identifies which issues are related or dependent on each other\n   - Groups related issues that should be fixed together in the same commit\n   - Orders fixes by dependency (fix issues that others depend on first)\n   - Numbers each fix in the plan\n\n2. **Implement ALL Fixes**: After presenting the plan, work through ALL fixes without stopping:\n   - For each complete issue:\n     * Implement all changes following the subtasks\n     * Run all tests you can yourself (build, type-check, etc.)\n     * Commit once per complete issue (not per subtask or file) with a short message describing the change\n     * **Immediately mark the issue as \"for-review\"** in issues.json after committing (change status from \"pending\" to \"for-review\")\n   - Continue through the entire list without waiting for my testing\n   - Do NOT push any commits yet\n\n3. **Code Organization Standards** - CRITICAL:\n   - **Maximum file length**: Keep files under 500 lines. If a file approaches this limit, refactor it into multiple smaller, focused modules.\n   - **Single-responsibility principle**: Each file/module should have one clear purpose. If a file is doing multiple unrelated things, split it.\n   - **Comment summaries**: Add 2-3 line comments at the top of each class/module explaining its purpose and responsibilities.\n   - **Before committing**: Run `python .vibe/scripts/analyze-file-lengths.py` to check for files over 500 lines. If any are found, refactor them first.\n   - **Modular structure**: Prefer many small, focused files over few large files. This improves both human and AI readability.\n   - **Readability over brevity**: Write clear, maintainable code with descriptive names and helpful comments.\n\n4. **Issue Status Workflow** - CRITICAL:\n   - **\"pending\"**: Issues not yet started (default initial status)\n   - **\"for-review\"**: Issues you've implemented and committed - THIS IS WHAT YOU MARK AFTER FIXING AN ISSUE\n     * Mark issues as \"for-review\" immediately after committing the fix\n     * This signals to the user that implementation is complete and testing is needed\n     * Update the issue in issues.json by changing status from \"pending\" to \"for-review\"\n   - **\"completed\"**: ONLY the user can set this status after testing confirms the fix works\n     * NEVER mark an issue as \"completed\" yourself\n     * Only the user marks issues as \"completed\" after they've tested and approved the implementation\n\n   **Remember**: After you commit a fix, you MUST update that issue's status to \"for-review\" in issues.json\n\n5. **Testing Phase**: After ALL fixes are implemented and committed:\n   - Provide a brief summary of changes (3-5 bullets) covering what was implemented\n   - Run the dev server (npm run tauri dev or npm run dev) to verify the app starts without errors\n   - Check the console for any startup errors\n   - Report \"Ready to test - [summary of changes]\" when complete\n   - I will then manually test the changes\n   - If I find issues, we'll fix them iteratively\n   - Once all tests pass, we'll push all commits together\n\n6. **Do NOT push code** until I have tested all changes and confirmed everything works.\n\nThis workflow allows you to work through all issues efficiently while ensuring everything is tested before being pushed to the repository.",
  "ideaRefinement": "I have an initial idea for a project called: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read the project idea** - First, please read the idea.md file in the .vibe folder at:\n   {PROJECT_PATH}/.vibe/idea.md\n\n2. **Research existing alternatives** - Before we proceed, please web search for:\n   - Existing apps/projects that solve the same or similar problems\n   - Open source projects that might already do what I'm trying to build\n   - Commercial products in this space\n\n   For each alternative you find, briefly describe:\n   - What it does and how it compares to my idea\n   - Whether it's open source (and if so, if it could be forked/extended)\n   - Key differences from my proposed approach\n\n3. **Question the approach** - Based on the problem described in idea.md:\n   - Is there a simpler or more straightforward way to solve this problem?\n   - Are there alternative approaches I should consider?\n   - What are the trade-offs of my proposed approach vs alternatives?\n\n4. **Iterate on the idea** - Based on your research and analysis:\n   - Ask clarifying questions about unclear aspects\n   - Suggest improvements to the core concept\n   - Help me refine the idea to ensure it's worth building\n   - Point out any potential issues or challenges\n\n5. **Finalize the idea** - Once we've discussed alternatives and refined the concept:\n   - Update the idea.md file with our refined thinking\n   - Make sure it clearly articulates the problem, solution, and why this approach makes sense\n\n**Important**: The goal here is to make sure we're building something worthwhile. Be critical and honest about whether this idea makes sense, or if there are better alternatives (including not building it at all).\n\nPlease start by reading the idea.md file and then web searching for existing alternatives!",
  "designSpec": "I need help generating an MVP design specification for my project: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read the project idea** - First, please read the idea.md file in the .vibe folder at:\n   {PROJECT_PATH}/.vibe/idea.md\n\n2. **Take the idea as given** - The core idea has already been validated and refined in the previous stage. Do NOT question or critique the fundamental concept. Instead, focus on how to design and scope the MVP implementation.\n\n3. **Be autonomous** - Make reasonable assumptions about standard UI/UX patterns and implementation details. Only ask clarifying questions when something is genuinely ambiguous or unclear about the core requirements. Prefer creating a complete design spec and letting me provide feedback rather than asking extensive upfront questions.\n\n4. **Propose MVP scope** - Directly propose what should be:\n   - ✅ In scope for MVP (core features that must be included)\n   - ❌ Out of scope for MVP (features to defer to later phases)\n\n5. **Generate design-spec.md** - Create a comprehensive design specification with:\n   - **Core Features**: Detailed description of each MVP feature\n   - **User Flows**: Step-by-step user interactions for key workflows\n   - **Design Decisions**: Key UI/UX decisions and rationale (explain your assumptions)\n   - **Out of Scope**: Features explicitly deferred to post-MVP\n\n6. **Write the file** - Save the design spec to:\n   {PROJECT_PATH}/.vibe/design-spec.md\n\n7. **Iterate on feedback** - After presenting the design spec, I'll review and provide feedback if changes are needed. Questions should be reserved for genuinely ambiguous requirements, not for confirmation on standard design patterns.\n\nPlease start by reading the idea.md file and directly generating a design spec. Make reasonable assumptions and document them in your design decisions.",
  "technicalSpec": "I need help generating a technical specification for my project: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read the design spec** - First, please read the design-spec.md file in the .vibe folder at:\n   {PROJECT_PATH}/.vibe/design-spec.md\n\n   Also read the idea.md for additional context:\n   {PROJECT_PATH}/.vibe/idea.md\n\n2. **Propose technical architecture** - Based on the design spec, propose:\n   - **Tech Stack**: Specific technologies, frameworks, and libraries to use\n   - **Architecture**: Overall system architecture (client-server, local-first, etc.)\n   - **Data Models**: Key data structures and their relationships\n   - **File Structure**: Recommended project organization\n   - **Key Technical Decisions**: Important technical choices and trade-offs\n\n3. **Explain your choices** - For each major technology choice, briefly explain:\n   - Why this technology is a good fit for the project\n   - What alternatives were considered\n   - Any important trade-offs or limitations\n\n4. **Generate technical-spec.md** - Create a comprehensive technical specification with:\n   - **Architecture Overview**: High-level system architecture\n   - **Tech Stack**: Complete list of technologies with justification\n   - **Data Models**: Detailed data structures and schemas\n   - **File/Project Structure**: How code should be organized\n   - **Key Technical Decisions**: Important technical choices with rationale\n   - **Development Setup**: How to set up the development environment\n\n5. **Write the file** - Save the technical spec to:\n   {PROJECT_PATH}/.vibe/technical-spec.md\n\nPlease start by reading the design spec and proposing your initial technical architecture!",
  "metadata": "I need help filling out the project metadata for: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read all specification documents** - Please scan these files to understand the project:\n   - {PROJECT_PATH}/.vibe/idea.md (project concept)\n   - {PROJECT_PATH}/.vibe/design-spec.md (MVP features)\n   - {PROJECT_PATH}/.vibe/technical-spec.md (architecture and tech stack)\n\n2. **Fill out metadata.md** - Please update the metadata file at {PROJECT_PATH}/.vibe/metadata.md with:\n   - **Name**: A nice human-readable project name (not just the folder name)\n   - **Status**: Keep as \"metadata-ready\" for now\n   - **Platform**: Specify the target platform(s) - e.g., \"Web\", \"Desktop\", \"Tauri Desktop App\", \"Mobile\", etc.\n   - **Description**: A clear 1-2 sentence description of what this project does\n   - **Tech Stack**: List the main technologies from the technical spec\n   - **Deployment**: Leave empty for now (will be filled after deployment)\n\n3. **Format requirements**:\n   - Keep the existing Name, Status, Platform, and Color lines at the top\n   - Update the Platform field based on the technical spec (e.g., if it's a Tauri app, write \"Tauri Desktop App\")\n   - Update the Description section with your summary\n   - List technologies as bullet points under Tech Stack\n   - Keep the markdown structure intact\n\nPlease read the specs and update the metadata file!",
  "implementation": "I'm ready to start implementing the MVP for my project: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read all specification documents** - Please read these files to understand the full context:\n   - {PROJECT_PATH}/.vibe/idea.md (project concept)\n   - {PROJECT_PATH}/.vibe/design-spec.md (MVP features and user flows)\n   - {PROJECT_PATH}/.vibe/technical-spec.md (architecture and tech stack)\n\n2. **Create implementation plan** - Based on the specs, create a plan that:\n   - Breaks down the MVP into logical implementation phases\n   - Identifies dependencies between features\n   - Suggests an order of implementation that allows for incremental testing\n   - Estimates rough complexity for each phase\n\n3. **Start implementation** - Begin implementing the MVP incrementally:\n   - Set up the initial project structure based on technical spec\n   - Implement core features one at a time\n   - Test each feature as you build it\n   - Keep me updated on progress\n\n4. **Follow best practices**:\n   - Write clean, maintainable code with clear comments\n   - Follow the architecture defined in technical-spec.md\n   - Implement only MVP features (defer out-of-scope items)\n   - Add proper error handling\n   - Test thoroughly as you go\n\n5. **Iterate and adjust** - As we implement:\n   - Flag any technical issues or blockers\n   - Suggest improvements if you see better approaches\n   - Ask for clarification when specs are ambiguous\n   - Keep the implementation focused on MVP scope\n\n**Important**: This is an MVP, so:\n- Prioritize core functionality over polish\n- Avoid premature optimization\n- Skip features marked as \"out of scope\" in design-spec.md\n- Focus on getting a working prototype that demonstrates value\n\nPlease start by reading the spec files and proposing your implementation plan!",
  "technicalTesting": "I need help creating a comprehensive test checklist for my project: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read all specification and implementation files** - Please scan:\n   - {PROJECT_PATH}/.vibe/design-spec.md (to understand features)\n   - {PROJECT_PATH}/.vibe/technical-spec.md (to understand architecture)\n   - The actual source code (to see what was implemented)\n\n2. **Create test checklist** - Generate a test-checklist.md file at:\n   {PROJECT_PATH}/.vibe/test-checklist.md\n\nThe checklist should include:\n\n**For each feature/functionality**:\n- [ ] Feature name or description\n  - What to test: Step-by-step testing instructions\n  - Expected behavior: What should happen\n  - Test outcome: [Leave blank for user to fill in - PASS/FAIL and comments]\n  - Notes: [Leave blank for user to add feedback]\n\n3. **Cover all testable areas**:\n   - All UI components and interactions\n   - All user flows from design-spec.md\n   - Edge cases and error handling\n   - Cross-browser/platform compatibility (if applicable)\n   - Data persistence and state management\n   - Any integrations or external dependencies\n\n4. **Format for manual testing**:\n   - Write clear, specific test steps anyone can follow\n   - Include test data or inputs to use\n   - Organize tests logically (by feature or user flow)\n   - Make it easy to track pass/fail status\n\n5. **Include instructions** - At the top of the file, explain:\n   - How to use this checklist\n   - What to write in \"Test outcome\" (PASS/FAIL + comments)\n   - That we'll iterate on fixes until all tests pass\n\nPlease create the comprehensive test checklist now!",
  "designTesting": "I need to review the design and UX of my MVP for: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read the design specification** - First, review what was intended:\n   {PROJECT_PATH}/.vibe/design-spec.md\n\n2. **Review the feedback document** - I've documented my design feedback at:\n   {PROJECT_PATH}/.vibe/design-feedback.md\n\n3. **Analyze and fix issues** - Based on my feedback:\n   - Address each piece of feedback iteratively\n   - Ask clarifying questions if feedback is unclear\n   - Suggest design improvements\n   - Implement fixes for design issues\n   - Remove features I marked for removal\n   - Refine UI/UX based on my notes\n\n4. **Iterate until satisfied** - We'll work through all feedback items together until:\n   - All critical design issues are resolved\n   - The MVP matches my vision\n   - UI/UX feels right and usable\n   - Any unwanted features are removed\n\nPlease read my design feedback and let's start addressing the issues one by one!",
  "deployment": "I'm ready to deploy my project: {PROJECT_NAME}\n\n**Instructions:**\n\n1. **Read the technical specification** - Review deployment requirements:\n   {PROJECT_PATH}/.vibe/technical-spec.md\n\n2. **Guide me through deployment** - Help me with step-by-step deployment:\n   - Choose appropriate hosting platform based on the tech stack\n   - Set up hosting account and configure deployment\n   - Configure environment variables and secrets\n   - Set up CI/CD if needed\n   - Deploy the application\n   - Verify the deployment works correctly\n\n3. **Test the live deployment** - Once deployed:\n   - Test all core functionality in production\n   - Check for any environment-specific issues\n   - Verify data persistence works\n   - Test performance and loading times\n   - Confirm all features work as expected\n\n4. **Document the deployment** - After successful deployment:\n   - Note the live URL\n   - Document deployment process for future updates\n   - Add deployment URL to metadata\n\n5. **Troubleshoot issues** - If anything doesn't work:\n   - Debug deployment errors together\n   - Fix configuration issues\n   - Ensure production environment matches dev expectations\n\nPlease help me choose a hosting platform and guide me through the deployment process!",
  "generateMetadata": "Please analyze this project and fill out the .vibe/metadata.md file with accurate information.\n\nProject: {PROJECT_NAME}\n\nInstructions:\n1. Scan key files in the project (package.json, README.md, source files, etc.)\n2. Come up with a nice display name for the project (not just the folder name)\n3. Determine the project status (draft/mvp-implemented/deployed)\n4. Identify the target platform (e.g., Web, Desktop, Tauri Desktop App, Mobile, etc.)\n5. Identify the project's purpose and write a clear description\n6. List all major technologies in the tech stack\n7. Look for deployment configuration or URLs if present\n\nThe .vibe/metadata.md file should have this format:\n\nName: [A nice human-readable project name]\nStatus: [draft OR mvp-implemented OR deployed]\nPlatform: [e.g., Web, Desktop, Tauri Desktop App, Mobile, etc.]\n\n## Description\n\n[Write a 1-2 sentence description of what this project does]\n\n## Tech Stack\n\n- [Technology 1]\n- [Technology 2]\n- [Technology 3]\n\n## Deployment\n\n[Add deployment URL if found, otherwise remove this section]\n\nPlease update the .vibe/metadata.md file now with accurate information based on your analysis of the codebase."
}